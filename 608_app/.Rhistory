# = 3x**2 +3hx + 2x + h**2 +h
# As h -> 0, this becomes 3x**2 + 2x
# However of this problem will not use the derivative but will use very small
# values of h
h = 1e -6
return (3*(x**2) + 3*h*x + 2*x + (h**2) + h))
}
h = 1e-6
return (3*(x**2) + 3*h*x + 2*x + (h**2) + h))
return (3 * (x**2) + 3 * h * x + 2 * x + (h**2) + h)
myDerivative = function(x){
# f(x) = x**3 + x**2
# let h be a very small increment of x
# therefore the slope of the line segment for f(x), for x = (x, x+h),
# y = (f(x), f(x+h)) = f(x+h) -f(x)/(x+h -x)
# = f(x+h) -fx) /h
# = [(x+h)**3 +(x+h)**2 -x**3 - x**2]/h
# = [x**3 =3hx**2 +3hx**2 +h**3 +x**2 +2hx +h**2 -x**3 -x**2]/h
# = [3hx**2 +3xh**2 +2hx +h**3 +h**2]/h
# = 3x**2 +3hx + 2x + h**2 +h
# As h -> 0, this becomes 3x**2 + 2x
# However of this problem will not use the derivative but will use very small
# values of h
h = 1e-6
return (3 * (x**2) + 3 * h * x + 2 * x + (h**2) + h)
}
myDerivative(3)
myDerivative = function(x){
# f(x) = x**3 + x**2
# let h be a very small increment of x
# therefore the slope of the line segment for f(x), for x = (x, x+h),
# y = (f(x), f(x+h)) = f(x+h) -f(x)/(x+h -x)
# = f(x+h) -fx) /h
# = [(x+h)**3 +(x+h)**2 -x**3 - x**2]/h
# = [x**3 =3hx**2 +3hx**2 +h**3 +x**2 +2hx +h**2 -x**3 -x**2]/h
# = [3hx**2 +3xh**2 +2hx +h**3 +h**2]/h
# = 3x**2 +3hx + 2x + h**2 +h
# As h -> 0, this becomes 3x**2 + 2x
# However of this problem will not use the derivative but will use very small
# values of h
h = 1e-10
return (3 * (x**2) + 3 * h * x + 2 * x + (h**2) + h)
}
myDerivative(3)
n = (3-1)/1e-06
n
smallinterval = 1e-06
n = (3-1)/smallinterval
smallinterval = 1e-06
n = (3-1)/smallinterval
# the area under the curve 3x^2 + 4x will be equal to the sum of the rectanges
# in the range x = (1,3), with the base of the rectange being 1e-06, the number
# of rectangles being n, while the height will taken as the left side height of
# trapezium
# Psuedo code
# the sum of the rectangles will be the sum of the sides mutipled by the base
# for (i in n, by = 1e-6)
# len = len + f(i-1e-6)
# area = len * 1e-6
len = 0
for (i in n, by = smallinterval){
len = len + i
}
len = 0
for (i in 1:n, by = smallinterval){
len = len + i
}
len = 0
for (i in seq(1, n, smallinterval){
len = len + i
}
len = 0
for (i in seq(1, n, smallinterval){
len = len + i
}
len = 0
len = len + i
n = (3-1)/smallinterval
smallinterval = 1e-06
for (i in seq(1, n, smallinterval){
len = len + i
}
for(x in seq(1,100,5)) {
print(x)
}
for(x in seq(1,10,.5)) {
print(x)
}
for(i in seq(1,10,.5)) {
print(i)
}
smallinterval = 5
for(i in seq(1,10,smallinterval)) {
print(i)
}
len = 0
smallinterval = 5
for(i in seq(1,10,smallinterval)) {
len = len + i
}
print(len)
smallinterval = 5000
for(i in seq(1,10,smallinterval)) {
len = len + i
}
print(len)
len = 0
smallinterval = 50000
for(i in seq(1,10,smallinterval)) {
len = len + i
}
print(len)
len = 0
smallinterval = 5
for(i in seq(1,10,smallinterval)) {
len = len + i
}
print(len)
len = 0
smallinterval = 5
for(i in seq(1,10,smallinterval)) {
len = len + i
print len
}
print(len)
len = 0
smallinterval = 5
for(i in seq(1,10,smallinterval)) {
len = len + i
print (len)
}
print(len)
len = 0
smallinterval = 1
for(i in seq(1,10,smallinterval)) {
len = len + i
print (len)
}
print(len)
len = 0
smallinterval = 10
for(i in seq(1,3,smallinterval)) {
len = len + i
print (len)
}
print(len)
len = 0
smallinterval = 0.10
for(i in seq(1,3,smallinterval)) {
len = len + i
print (len)
}
print(len)
smallinterval = 0.10
for(i in seq(1,3,smallinterval)) {
print(i)
}
smallinterval = 0.010
for(i in seq(1,3,smallinterval)) {
print(i)
}
smallinterval = 0.010
for(i in seq(1,3,smallinterval)) {
# f(x)  = 3x^2 + 4x
print ( 3 * (i- smallinterval)**2 + 4*(i-smallinterval))
print(i)
}
len = 0
smallinterval = 0.010
for(i in seq(1,3,smallinterval)) {
# f(x)  = 3x^2 + 4x
len = len + ( 3 * (i- smallinterval)**2 + 4*(i-smallinterval))
print(len)
}
len = 0
smallinterval = 0.0010
for(i in seq(1,3,smallinterval)) {
# f(x)  = 3x^2 + 4x
len = len + ( 3 * (i- smallinterval)**2 + 4*(i-smallinterval))
print(len)
}
len = 0
smallinterval = 0.00010
for(i in seq(1,3,smallinterval)) {
# f(x)  = 3x^2 + 4x
len = len + ( 3 * (i- smallinterval)**2 + 4*(i-smallinterval))
print(len)
}
len = 0
smallinterval = 0.00010
for(i in seq(1,3,smallinterval)) {
# f(x)  = 3x^2 + 4x
len = len + ( 3 * (i- smallinterval)**2 + 4*(i-smallinterval))
print(len)
}
area = len*smallinterval
area
len = 0
smallinterval = 0.00010
for(i in seq(1,3,smallinterval)) {
# f(x)  = 3x^2 + 4x
len = len + ( 3 * (i)**2 + 4*(i))
print(len)
}
area = len*smallinterval
area
smallinterval = 1e-06
# Using the left side length of the trapezium
len = 0
for(i in seq(1,3,smallinterval)) {
# f(x)  = 3x^2 + 4x
# x = x - small increment
len = len + ( 3 * (i- smallinterval)**2 + 4*(i-smallinterval))
}
area = len*smallinterval
print("Area under the curve 3x^2 + 4x between x = (1, 3) using left side of the
trapezium:"
print(area)
print("Area under the curve 3x^2 + 4x between x = (1, 3) using left side of the
trapezium:")
print(area)
str = "Area under the curve 3x^2 + 4x between x = (1, 3) using left side of the"
print(str + " trapezium:")
print(area)
area = len*smallinterval
str = "Area under the curve 3x^2 + 4x between x = (1, 3) using left side of the"
print(paste(str, "trapezium:", sep = " ")
print(area)
print(paste(str, "trapezium:", sep = " ")
)3
area = len*smallinterval
str = "Area under the curve 3x^2 + 4x between x = (1, 3) using left side of the"
print(paste(str, "trapezium:", sep = " "))
print(area)
# Using the right side length of the trapezium
len = 0
for(i in seq(1,3,smallinterval)) {
# f(x)  = 3x^2 + 4x
len = len + ( 3 * (i)**2 + 4*(i))
}
area = len*smallinterval
str = "Area under the curve 3x^2 + 4x between x = (1, 3) using right side of the"
print(paste(str, "trapezium:", sep = " "))
print(area)
$$\int_0^{2\pi} \sin x~dx$$
$$\int_0^{2\pi} \sin x~dx$$
setwd("C:/Users/Jare_2/Desktop/WorkDocs/CUNY/608/Final Project/my_app - Copy")
shiny::runApp()
mppstate = cmsdata %>%
group_by(state) %>%
summarise(Total_Payment = sum(total_medicare_payment_amt), Count = n()) %>%
arrange(desc(Total_Payment))
saveloc = paste(getwd(), "/data/","cmsdata.RData", sep = "")
load(saveloc)
# convert datarame to tbl for easier manipulation
cmsdata = tbl_df(cmsdata)
mppstate = cmsdata %>%
group_by(state) %>%
summarise(Total_Payment = sum(total_medicare_payment_amt), Count = n()) %>%
arrange(desc(Total_Payment))
write.table(mppstate, file = paste(getwd(), "/data"/, "statecmsdata.csv", sep ="")
write.table(mppstate, file = paste(getwd(), "/data"/, "statecmsdata.csv", sep =""))
file = paste(getwd(), "/data"/, "statecmsdata.csv", sep ="")
write.table(mppstate, file = file )
file = paste(getwd(), "/data/", "statecmsdata.csv", sep ="")
write.table(mppstate, file = file )
file = paste(getwd(), "/data/", "statecmsdata.csv", sep ="")
write.csv(mppstate, file = file )
shiny::runApp()
setwd("C:/Users/Jare_2/Desktop/WorkDocs/CUNY/608/Final Project/my_app - Copy")
shiny::runApp()
shiny::runApp('C:/Users/Jare_2/Desktop/app')
if (!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
if (!require(dplyr)) install.packages("dplyr")
library(dplyr)
getwd()
fileloc = paste(getwd(), "/data/cmspopulationdata.csv", sep ="")
data = read.csv(fileloc)
data
data = tbl_df(data)
data
data = data %>%
select(payment, population, population_65,male_65, female_65, white, black, american_indian, asian, hawaiian,other, hispanic)
data
model_all = lm(data = data, payment~.)
summary(model_all)
coefficients (model_all)
# 95% Confidence Intervals
confint(model_all, level = 0.95)
data$predpayment = predict(model_all, data = data)
ggplot(data=data,aes(x=predpayment, y=payment)) +
geom_point(color="red") +
geom_smooth(method = "lm", aes(x=predpayment,y=payment),color="black") +
geom_line(aes(x= predMAXHR, y = MAXHR),color="blue",linetype=2) +
labs(x="Predict Maximum Heart Rate from Model",
y="Maximum Heart Rate from Data", title = "Plot of Fitted Relationshipe
between Model and Given Data, with Fitted line (black)") +
theme(panel.background = element_rect(fill = 'gray70', colour = 'red'))
# Plotting residuals vesus fitted
ggplot(data=data,aes(x = predpayment, y = predpayment-payment)) +
geom_point(color="red", size = 5) +
geom_smooth(method = "loess", aes(x = predpayment, y = predpayment-payment),
color="black") +
labs(x="Predict Maximum Heart Rate from Model",
y="Difference bewteen Predicted Maximum Heart Rate and Maximum Heart Rate
from Data ", title = "Plot of Residuals
between Model and Given Data, with Fitted line (black)") +
theme(panel.background = element_rect(fill = 'white', colour = 'red'))
ggplot(data=data,aes(x=predpayment, y=payment)) +
geom_point(color="red") +
geom_smooth(method = "lm", aes(x=predpayment,y=payment),color="black") +
geom_line(aes(x= predpayment, y = payment),color="blue",linetype=2) +
labs(x="Predict Maximum Heart Rate from Model",
y="Maximum Heart Rate from Data", title = "Plot of Fitted Relationshipe
between Model and Given Data, with Fitted line (black)") +
theme(panel.background = element_rect(fill = 'gray70', colour = 'red'))
ggplot(data=data,aes(x=predpayment, y=payment)) +
geom_point(color="red") +
geom_smooth(method = "lm", aes(x=predpayment,y=payment),color="black") +
geom_line(aes(x= predpayment, y = payment),color="blue",linetype=2) +
labs(x="Predicted Medicare Payment from Model",
y="Payemnt from CMS Data", title = "Plot of Fitted Relationshipe
between Model and CMS Data, with Fitted line (black)") +
theme(panel.background = element_rect(fill = 'gray70', colour = 'red'))
ggplot(data=data,aes(x = predpayment, y = predpayment-payment)) +
geom_point(color="red", size = 5) +
geom_smooth(method = "loess", aes(x = predpayment, y = predpayment-payment),
color="black") +
labs(x="Predict Maximum Heart Rate from Model",
y="Difference bewteen Predicted Maximum Heart Rate and Maximum Heart Rate
from Data ", title = "Plot of Residuals
between Model and Given Data, with Fitted line (black)") +
theme(panel.background = element_rect(fill = 'white', colour = 'red'))
ggplot(data=data,aes(x = predpayment, y = predpayment-payment)) +
geom_point(color="red", size = 5) +
geom_smooth(method = "loess", aes(x = predpayment, y = predpayment-payment),
color="black") +
labs(x="Predict Payment from Model",
y="Difference bewteen Predicted Payment from Model and Payment from CMS Data",
title = "Plot of Residuals
between Model and CMS Data, with Fitted line (black)") +
theme(panel.background = element_rect(fill = 'white', colour = 'red'))
shiny::runApp()
data$predpayment = predict(model_all, data = data)
ggplot(data=data,aes(x=predpayment, y=payment)) +
geom_point(color="red") +
geom_smooth(method = "lm", aes(x=predpayment,y=payment),color="black") +
geom_line(aes(x= predpayment, y = payment),color="blue",linetype=2) +
labs(x="Predicted Medicare Payment from Model",
y="Payemnt from CMS Data", title = "Plot of Fitted Relationshipe
between Model and CMS Data, with Fitted line (black)") +
theme(panel.background = element_rect(fill = 'gray70', colour = 'red'))
fileloc = paste(getwd(), "/data/cmspopulationdata.csv", sep ="")
data = read.csv(fileloc)
fileloc = paste(getwd(), "/data/cmspopulationdata.csv", sep ="")
cmspopulationdata = read.csv(fileloc)
save(cmspopulationdata, file = "/data/cmspopulationdata.RData")
save(cmspopulationdata, file = "cmspopulationdata.RData")
fileloc = paste(getwd(), "/data/cmspopulationdata.Rdata", sep ="")
load(fileloc)
fileloc = paste(getwd(), "/data/cmspopulationdata.Rdata", sep ="")
load(fileloc)
#save(cmspopulationdata, file = "cmspopulationdata.RData")
#data = tbl_df(data)
cmspopulationdata = cmspopulationdata %>%
select(payment, population, population_65,male_65, female_65, white, black, american_indian, asian, hawaiian,other, hispanic)
model_all = lm(data = cmspopulationdata, payment~.)
summary(model_all)
coefficients (model_all)
# 95% Confidence Intervals
confint(model_all, level = 0.95)
# Please also plot the fitted relationship between Max HR and Age.
# will use the model to predict what the expected heart rate should be:
cmspopulationdata$predpayment = predict(model_all, data = cmspopulationdata)
ggplot(data=cmspopulationdata,aes(x=predpayment, y=payment)) +
geom_point(color="red") +
geom_smooth(method = "lm", aes(x=predpayment,y=payment),color="black") +
geom_line(aes(x= predpayment, y = payment),color="blue",linetype=2) +
labs(x="Predicted Medicare Payment from Model",
y="Payemnt from CMS Data", title = "Plot of Fitted Relationship
between Model and CMS Data, with Fitted line (black)") +
theme(panel.background = element_rect(fill = 'gray70', colour = 'red'))
# Plotting residuals vesus fitted
ggplot(data=cmspopulationdata,aes(x = predpayment, y = predpayment-payment)) +
geom_point(color="red", size = 5) +
geom_smooth(method = "loess", aes(x = predpayment, y = predpayment-payment),
color="black") +
labs(x="Predict Payment from Model",
y="Difference bewteen Predicted Payment from Model and Payment from CMS Data",
title = "Plot of Residuals
between Model and CMS Data, with Fitted line (black)") +
theme(panel.background = element_rect(fill = 'white', colour = 'red'))
shiny::runApp()
coefficients (model_all)
confint(model_all, level = 0.95)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
withProgress(message = 'Making plot', value = 0, {
# Number of times we'll go through the loop
n <- 10
for (i in 1:n) {
# Each time through the loop, add another row of data. This is
# a stand-in for a long-running computation.
dat <- rbind(dat, data.frame(x = rnorm(1), y = rnorm(1)))
# Increment the progress bar, and update the detail text.
incProgress(1/n, detail = paste("Doing part", i))
# Pause for 0.1 seconds to simulate a long computation.
Sys.sleep(0.1)
}
})
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
plotOutput('plot', width = "300px", height = "300px"),
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
# Create a Progress object
progress <- shiny::Progress$new()
# Make sure it closes when we exit this reactive, even if there's an error
on.exit(progress$close())
progress$set(message = "Making plot", value = 0)
# Number of times we'll go through the loop
n <- 10
for (i in 1:n) {
# Each time through the loop, add another row of data. This is
# a stand-in for a long-running computation.
dat <- rbind(dat, data.frame(x = rnorm(1), y = rnorm(1)))
# Increment the progress bar, and update the detail text.
progress$inc(1/n, detail = paste("Doing part", i))
# Pause for 0.1 seconds to simulate a long computation.
Sys.sleep(0.1)
}
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
plotOutput('plot', width = "300px", height = "300px"),
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
format(Sys.time(), "%S")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
## Not run:
shinyServer(function(input, output, session) {
# Anything that calls autoInvalidate will automatically invalidate
# every 2 seconds.
autoInvalidate <- reactiveTimer(2000, session)
observe({
# Invalidate and re-execute this reactive expression every time the
# timer fires.
autoInvalidate()
# Do something each time this is invalidated.
# The isolate() makes this observer _not_ get invalidated and re-executed
# when input$n changes.
print(paste("The value of input$n is", isolate(input$n)))
})
# Generate a new histogram each time the timer fires, but not when
# input$n changes.
output$plot <- renderPlot({
autoInvalidate()
hist(isolate(input$n))
})
})
## End(Not run)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
s = Sys.time()
e = Sys.time()
e-s
e-s
as.integer(e-s)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
